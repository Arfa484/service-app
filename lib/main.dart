import 'package:flutter/material.dart';
import 'user_profile_page.dart';
import 'contact_us_page.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by FlutterFire CLI
import 'package:multi_select_flutter/multi_select_flutter.dart';
import 'service_details_wizard.dart';
import 'user_profile_data.dart';
import 'get_service_page.dart';
import 'auth_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  print('Firebase Initialized!');
  runApp(const ServanaApp());
}

class ServanaApp extends StatelessWidget {
  const ServanaApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: "Servana",
      theme: ThemeData(
        primarySwatch: Colors.red,
        fontFamily: 'SF Pro Display',
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 32,
            fontWeight: FontWeight.bold,
            letterSpacing: -0.5,
          ),
          headlineMedium: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.w600,
            letterSpacing: -0.3,
          ),
          bodyLarge: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w400,
            letterSpacing: 0.1,
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            elevation: 8,
            shadowColor: Colors.black26,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
          ),
        ),
        cardTheme: CardThemeData(
          elevation: 12,
          shadowColor: Colors.black12,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

/// 🚀 Splash Screen
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _scaleController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();

    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut),
    );

    _scaleAnimation = Tween<double>(begin: 0.5, end: 1.0).animate(
      CurvedAnimation(parent: _scaleController, curve: Curves.elasticOut),
    );

    _fadeController.forward();
    _scaleController.forward();

    Future.delayed(const Duration(seconds: 5), () {
      Navigator.pushReplacement(
        context,
        PageRouteBuilder(
          pageBuilder: (_, __, ___) => const AuthChoicePage(),
          transitionsBuilder: (_, anim, __, child) =>
              FadeTransition(opacity: anim, child: child),
          transitionDuration: const Duration(milliseconds: 800),
        ),
      );
    });
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _scaleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Color(0xFFFF6B6B), Color(0xFFFF8E53), Color(0xFFFF6B9D)],
          ),
        ),
        child: Center(
          child: AnimatedBuilder(
            animation: Listenable.merge([_fadeAnimation, _scaleAnimation]),
            builder: (context, child) {
              return FadeTransition(
                opacity: _fadeAnimation,
                child: ScaleTransition(
                  scale: _scaleAnimation,
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Container(
                        padding: const EdgeInsets.all(24),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(24),
                          border: Border.all(
                            color: Colors.white.withOpacity(0.2),
                            width: 1,
                          ),
                        ),
                        child: const Icon(
                          Icons.handyman_rounded,
                          size: 64,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 32),
                      const Text(
                        "Servana",
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 56,
                          fontWeight: FontWeight.bold,
                          letterSpacing: -1,
                          shadows: [
                            Shadow(
                              offset: Offset(0, 4),
                              blurRadius: 8,
                              color: Colors.black26,
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 12),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.15),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: const Text(
                          "your service nirvana",
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.w300,
                            letterSpacing: 1.2,
                          ),
                        ),
                      ),
                      const SizedBox(height: 60),
                      SizedBox(
                        width: 40,
                        height: 40,
                        child: CircularProgressIndicator(
                          strokeWidth: 3,
                          valueColor: AlwaysStoppedAnimation<Color>(
                            Colors.white.withOpacity(0.8),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}

/// 🌟 Header
class ServanaHeader extends StatelessWidget {
  const ServanaHeader({super.key});
  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.fromLTRB(20, 60, 20, 30),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.deepPurple.shade700, Colors.indigo.shade600],
        ),
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(30),
          bottomRight: Radius.circular(30),
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 20,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: SafeArea(
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(16),
              ),
              child: const Icon(
                Icons.handyman_rounded,
                color: Colors.white,
                size: 28,
              ),
            ),
            const SizedBox(width: 16),
            const Text(
              "Servana",
              style: TextStyle(
                fontSize: 32,
                fontWeight: FontWeight.bold,
                color: Colors.white,
                letterSpacing: -0.5,
                shadows: [
                  Shadow(
                    offset: Offset(0, 2),
                    blurRadius: 4,
                    color: Colors.black26,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// 🔑 Auth Choice
class AuthChoicePage extends StatelessWidget {
  const AuthChoicePage({super.key});
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.grey.shade50, Colors.white, Colors.grey.shade100],
          ),
        ),
        child: Column(
          children: [
            const ServanaHeader(),
            Expanded(
              child: Padding(
                padding: const EdgeInsets.all(24),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(32),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(24),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.1),
                            blurRadius: 20,
                            offset: const Offset(0, 8),
                          ),
                        ],
                      ),
                      child: Column(
                        children: [
                          Icon(
                            Icons.waving_hand_rounded,
                            size: 64,
                            color: Colors.amber.shade600,
                          ),
                          const SizedBox(height: 24),
                          Text(
                            "Welcome to Servana!",
                            style: Theme.of(context).textTheme.headlineMedium
                                ?.copyWith(
                                  color: Colors.grey.shade800,
                                  fontWeight: FontWeight.bold,
                                ),
                          ),
                          const SizedBox(height: 12),
                          Text(
                            "Connect with trusted service providers\nin your area",
                            textAlign: TextAlign.center,
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: 16,
                              height: 1.5,
                            ),
                          ),
                          const SizedBox(height: 40),
                          _modernAuthBtn(
                            context,
                            "Create Account",
                            Icons.person_add_rounded,
                            LinearGradient(
                              colors: [
                                Colors.red.shade400,
                                Colors.red.shade600,
                              ],
                            ),
                            () => Navigator.push(
                              context,
                              _slideRoute(const SignupPage()),
                            ),
                          ),
                          const SizedBox(height: 16),
                          _modernAuthBtn(
                            context,
                            "Sign In",
                            Icons.login_rounded,
                            LinearGradient(
                              colors: [
                                Colors.grey.shade700,
                                Colors.grey.shade900,
                              ],
                            ),
                            () => Navigator.push(
                              context,
                              _slideRoute(const UnifiedLoginPage()),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _modernAuthBtn(
    BuildContext context,
    String text,
    IconData icon,
    Gradient gradient,
    VoidCallback onTap,
  ) {
    return Container(
      width: double.infinity,
      height: 56,
      decoration: BoxDecoration(
        gradient: gradient,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(16),
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 24),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, color: Colors.white, size: 24),
                const SizedBox(width: 12),
                Text(
                  text,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                    letterSpacing: 0.5,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Route _slideRoute(Widget page) {
    return PageRouteBuilder(
      pageBuilder: (context, animation, secondaryAnimation) => page,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        const begin = Offset(1.0, 0.0);
        const end = Offset.zero;
        const curve = Curves.easeInOutCubic;

        var tween = Tween(
          begin: begin,
          end: end,
        ).chain(CurveTween(curve: curve));

        return SlideTransition(position: animation.drive(tween), child: child);
      },
      transitionDuration: const Duration(milliseconds: 400),
    );
  }
}

/// 📝 Signup
class SignupPage extends StatefulWidget {
  const SignupPage({super.key});
  @override
  State<SignupPage> createState() => _SignupPageState();
}

class _SignupPageState extends State<SignupPage> {
  final fullName = TextEditingController();
  final phoneOrEmail = TextEditingController(); // Combined field
  final pass = TextEditingController();
  final otp = TextEditingController(); // for OTP input

  final _formKey = GlobalKey<FormState>();
  bool _isPhoneSignup = false;
  bool _isOtpSent = false;
  bool _isOtpVerified = false;
  bool _isSendingOtp = false;
  String? _verificationId;
  String? _selectedLocation;

  // Indian cities with their states
  final Map<String, String> _indianCities = {
    'Mumbai': 'Maharashtra',
    'Delhi': 'Delhi',
    'Bengaluru': 'Karnataka',
    'Chennai': 'Tamil Nadu',
    'Hyderabad': 'Telangana',
    'Kolkata': 'West Bengal',
    'Pune': 'Maharashtra',
    'Ahmedabad': 'Gujarat',
    'Jaipur': 'Rajasthan',
    'Lucknow': 'Uttar Pradesh',
    'Kanpur': 'Uttar Pradesh',
    'Nagpur': 'Maharashtra',
    'Indore': 'Madhya Pradesh',
    'Thane': 'Maharashtra',
    'Bhopal': 'Madhya Pradesh',
    'Visakhapatnam': 'Andhra Pradesh',
    'Pimpri-Chinchwad': 'Maharashtra',
    'Patna': 'Bihar',
    'Vadodara': 'Gujarat',
    'Ghaziabad': 'Uttar Pradesh',
    'Ludhiana': 'Punjab',
    'Agra': 'Uttar Pradesh',
    'Nashik': 'Maharashtra',
    'Faridabad': 'Haryana',
    'Meerut': 'Uttar Pradesh',
    'Rajkot': 'Gujarat',
    'Kalyan-Dombivli': 'Maharashtra',
    'Vasai-Virar': 'Maharashtra',
    'Varanasi': 'Uttar Pradesh',
    'Srinagar': 'Jammu and Kashmir',
    'Aurangabad': 'Maharashtra',
    'Dhanbad': 'Jharkhand',
    'Amritsar': 'Punjab',
    'Navi Mumbai': 'Maharashtra',
    'Allahabad': 'Uttar Pradesh',
    'Ranchi': 'Jharkhand',
    'Howrah': 'West Bengal',
    'Coimbatore': 'Tamil Nadu',
    'Jabalpur': 'Madhya Pradesh',
    'Gwalior': 'Madhya Pradesh',
    'Vijayawada': 'Andhra Pradesh',
    'Jodhpur': 'Rajasthan',
    'Madurai': 'Tamil Nadu',
    'Raipur': 'Chhattisgarh',
    'Kota': 'Rajasthan',
    'Chandigarh': 'Chandigarh',
    'Guwahati': 'Assam',
    'Solapur': 'Maharashtra',
    'Hubli-Dharwad': 'Karnataka',
    'Tiruchirappalli': 'Tamil Nadu',
    'Bareilly': 'Uttar Pradesh',
    'Mysore': 'Karnataka',
    'Tiruppur': 'Tamil Nadu',
    'Gurgaon': 'Haryana',
    'Aligarh': 'Uttar Pradesh',
    'Jalandhar': 'Punjab',
    'Bhubaneswar': 'Odisha',
    'Salem': 'Tamil Nadu',
    'Warangal': 'Telangana',
    'Guntur': 'Andhra Pradesh',
    'Bhiwandi': 'Maharashtra',
    'Saharanpur': 'Uttar Pradesh',
    'Gorakhpur': 'Uttar Pradesh',
    'Bikaner': 'Rajasthan',
    'Amravati': 'Maharashtra',
    'Noida': 'Uttar Pradesh',
    'Jamshedpur': 'Jharkhand',
    'Bhilai': 'Chhattisgarh',
    'Cuttack': 'Odisha',
    'Firozabad': 'Uttar Pradesh',
    'Kochi': 'Kerala',
    'Nellore': 'Andhra Pradesh',
    'Bhavnagar': 'Gujarat',
    'Dehradun': 'Uttarakhand',
    'Durgapur': 'West Bengal',
    'Asansol': 'West Bengal',
    'Rourkela': 'Odisha',
    'Nanded': 'Maharashtra',
    'Kolhapur': 'Maharashtra',
    'Ajmer': 'Rajasthan',
    'Akola': 'Maharashtra',
    'Gulbarga': 'Karnataka',
    'Jamnagar': 'Gujarat',
    'Ujjain': 'Madhya Pradesh',
    'Loni': 'Uttar Pradesh',
    'Siliguri': 'West Bengal',
    'Jhansi': 'Uttar Pradesh',
    'Ulhasnagar': 'Maharashtra',
    'Jammu': 'Jammu and Kashmir',
    'Sangli-Miraj & Kupwad': 'Maharashtra',
    'Mangalore': 'Karnataka',
    'Erode': 'Tamil Nadu',
    'Belgaum': 'Karnataka',
    'Ambattur': 'Tamil Nadu',
    'Tirunelveli': 'Tamil Nadu',
    'Malegaon': 'Maharashtra',
    'Gaya': 'Bihar',
    'Jalgaon': 'Maharashtra',
    'Udaipur': 'Rajasthan',
    'Maheshtala': 'West Bengal',
  };

  // Detect if input is phone number or email
  void _detectInputType() {
    String input = phoneOrEmail.text.trim();
    bool isPhone =
        RegExp(r'^[+]?[0-9\s-()]+$').hasMatch(input) && input.length >= 10;

    setState(() {
      _isPhoneSignup = isPhone;
      _isOtpSent = false; // Reset OTP state when input changes
      _isOtpVerified = false;
    });
  }

  Future<void> _sendOTP() async {
    String phoneNumber = phoneOrEmail.text.trim();
    String cleanNumber = phoneNumber.replaceAll(RegExp(r'[\s-()]'), '');

    if (!cleanNumber.startsWith('+')) {
      if (cleanNumber.length == 10) {
        phoneNumber = '+91$cleanNumber';
      } else {
        phoneNumber = '+1$cleanNumber';
      }
    } else {
      phoneNumber = cleanNumber;
    }

    setState(() => _isSendingOtp = true);

    try {
      await FirebaseAuth.instance.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          // Auto-verification completed
          setState(() {
            _isOtpSent = true;
            _isOtpVerified = true;
          });
        },
        verificationFailed: (FirebaseAuthException e) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Verification failed: ${e.message}')),
          );
        },
        codeSent: (String verificationId, int? resendToken) {
          setState(() {
            _verificationId = verificationId;
            _isOtpSent = true;
          });
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('OTP sent successfully!')),
          );
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          setState(() {
            _verificationId = verificationId;
          });
        },
        timeout: const Duration(seconds: 60),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: $e')));
    } finally {
      setState(() => _isSendingOtp = false);
    }
  }

  Future<void> _verifyOTP() async {
    if (otp.text.trim().isEmpty || otp.text.trim().length != 6) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter a valid 6-digit OTP')),
      );
      return;
    }

    try {
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: _verificationId!,
        smsCode: otp.text.trim(),
      );

      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithCredential(credential);

      // Save user to Firestore after phone verification
      User? user = userCredential.user;
      if (user != null) {
        await saveUserToFirestore(
          user,
          fullName: fullName.text.trim(),
          location: _selectedLocation,
        );
      }

      setState(() {
        _isOtpVerified = true;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Phone number verified successfully!')),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Invalid OTP: $e')));
    }
  }

  Future<void> _signUpWithEmail() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(
            email: phoneOrEmail.text.trim(),
            password: pass.text.trim(),
          );

      // Send verification email and save to Firestore
      User? user = userCredential.user;
      if (user != null) {
        // Save user to Firestore
        await saveUserToFirestore(
          user,
          fullName: fullName.text.trim(),
          location: _selectedLocation,
        );

        if (!user.emailVerified) {
          await user.sendEmailVerification();

          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text(
                'Account created! Please check your email to verify your account.',
              ),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 4),
            ),
          );

          // Navigate to email verification page instead of main app
          Navigator.pushReplacement(
            context,
            _animRoute(const EmailVerificationPage()),
          );
        }
      }

      setState(() {
        _isOtpVerified = true; // Mark as verified for email signup
      });
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Email signup failed: $e')));
    }
  }

  bool _canSignUp() {
    if (_isPhoneSignup) {
      return _isOtpVerified &&
          _selectedLocation !=
              null; // Phone signup requires OTP verification and location
    } else {
      return phoneOrEmail.text.trim().isNotEmpty &&
          _selectedLocation != null; // Email signup needs email and location
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Sign Up")),
      body: Column(
        children: [
          const ServanaHeader(),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Form(
                key: _formKey,
                child: ListView(
                  children: [
                    _field(fullName, "Full Name *"),
                    const SizedBox(height: 15),

                    // Phone or Email with smart detection
                    TextFormField(
                      controller: phoneOrEmail,
                      onChanged: (_) => _detectInputType(),
                      decoration: InputDecoration(
                        labelText: "Phone Number or Email *",
                        hintText: "Enter phone number or email",
                        border: const OutlineInputBorder(),
                        prefixIcon: Icon(
                          _isPhoneSignup ? Icons.phone : Icons.email,
                        ),
                        suffixIcon: _isPhoneSignup && !_isOtpSent
                            ? SizedBox(
                                width: 100,
                                child: ElevatedButton(
                                  style: ElevatedButton.styleFrom(
                                    backgroundColor: Colors.red,
                                    foregroundColor: Colors.white,
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                  ),
                                  onPressed: _isSendingOtp ? null : _sendOTP,
                                  child: _isSendingOtp
                                      ? const SizedBox(
                                          height: 16,
                                          width: 16,
                                          child: CircularProgressIndicator(
                                            color: Colors.white,
                                            strokeWidth: 2,
                                          ),
                                        )
                                      : const Text(
                                          "Send OTP",
                                          style: TextStyle(fontSize: 10),
                                        ),
                                ),
                              )
                            : null,
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please enter phone number or email";
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 10),

                    // Show detection status
                    if (phoneOrEmail.text.trim().isNotEmpty)
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 6,
                        ),
                        decoration: BoxDecoration(
                          color: _isPhoneSignup
                              ? Colors.blue.shade50
                              : Colors.green.shade50,
                          borderRadius: BorderRadius.circular(20),
                          border: Border.all(
                            color: _isPhoneSignup
                                ? Colors.blue.shade200
                                : Colors.green.shade200,
                          ),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              _isPhoneSignup ? Icons.phone : Icons.email,
                              size: 16,
                              color: _isPhoneSignup
                                  ? Colors.blue.shade700
                                  : Colors.green.shade700,
                            ),
                            const SizedBox(width: 6),
                            Text(
                              _isPhoneSignup ? "Phone signup" : "Email signup",
                              style: TextStyle(
                                color: _isPhoneSignup
                                    ? Colors.blue.shade700
                                    : Colors.green.shade700,
                                fontSize: 12,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ),
                    const SizedBox(height: 15),

                    // OTP Field - only show if OTP is sent for phone signup
                    if (_isPhoneSignup && _isOtpSent) ...[
                      Row(
                        children: [
                          Expanded(flex: 2, child: _field(otp, "Enter OTP")),
                          const SizedBox(width: 10),
                          Expanded(
                            flex: 1,
                            child: ElevatedButton(
                              style: ElevatedButton.styleFrom(
                                backgroundColor: _isOtpVerified
                                    ? Colors.green
                                    : Colors.blue,
                                foregroundColor: Colors.white,
                                padding: const EdgeInsets.symmetric(
                                  vertical: 16,
                                ),
                              ),
                              onPressed: _isOtpVerified ? null : _verifyOTP,
                              child: Text(
                                _isOtpVerified ? "Verified" : "Verify",
                                style: const TextStyle(fontSize: 12),
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 15),
                    ],

                    _field(pass, "Password *", obscure: true),
                    const SizedBox(height: 15),

                    // Location Dropdown
                    DropdownButtonFormField<String>(
                      initialValue: _selectedLocation,
                      decoration: const InputDecoration(
                        labelText: "Location *",
                        hintText: "Select your city",
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.location_city),
                      ),
                      items: _indianCities.entries.map((entry) {
                        return DropdownMenuItem<String>(
                          value: '${entry.key}, ${entry.value}',
                          child: Text('${entry.key}, ${entry.value}'),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        setState(() {
                          _selectedLocation = newValue;
                        });
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please select your location";
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 25),

                    // Profile Photo Upload (optional)
                    ElevatedButton.icon(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey.shade300,
                        foregroundColor: Colors.black,
                      ),
                      onPressed: () {
                        // TODO: image picker later
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text("Profile photo upload coming soon!"),
                          ),
                        );
                      },
                      icon: const Icon(Icons.photo_camera),
                      label: const Text("Upload Profile Photo (optional)"),
                    ),
                    const SizedBox(height: 25),

                    const SizedBox(height: 25),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _canSignUp()
                            ? Colors.red
                            : Colors.grey,
                        foregroundColor: Colors.white,
                      ),
                      onPressed: _canSignUp()
                          ? () {
                              if (_formKey.currentState!.validate()) {
                                if (_isPhoneSignup) {
                                  // Phone signup already verified via OTP
                                  Navigator.pushReplacement(
                                    context,
                                    _animRoute(const ServiceChoicePage()),
                                  );
                                } else {
                                  // Email signup
                                  _signUpWithEmail();
                                }
                              }
                            }
                          : null,
                      child: const Text("Sign Up"),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _field(TextEditingController c, String hint, {bool obscure = false}) {
    return TextFormField(
      controller: c,
      obscureText: obscure,
      decoration: InputDecoration(
        labelText: hint,
        border: const OutlineInputBorder(),
      ),
      validator: (v) => v!.isEmpty ? "$hint required" : null,
    );
  }
}

/// 🔐 Unified Login
class UnifiedLoginPage extends StatefulWidget {
  const UnifiedLoginPage({super.key});
  @override
  State<UnifiedLoginPage> createState() => _UnifiedLoginPageState();
}

class _UnifiedLoginPageState extends State<UnifiedLoginPage> {
  final _userController = TextEditingController();
  final _passwordController = TextEditingController();
  final _otpController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  bool _isPhoneLogin = false;
  bool _isLoading = false;
  bool _isOtpSent = false;
  String? _verificationId;

  // Detect if input is phone number or email
  void _detectInputType() {
    String input = _userController.text.trim();
    bool isPhone =
        RegExp(r'^[+]?[0-9\s-()]+$').hasMatch(input) && input.length >= 10;

    setState(() {
      _isPhoneLogin = isPhone;
      _isOtpSent = false; // Reset OTP state when input changes
    });
  }

  Future<void> _sendOTP() async {
    String phoneNumber = _userController.text.trim();
    String cleanNumber = phoneNumber.replaceAll(RegExp(r'[\s-()]'), '');

    if (!cleanNumber.startsWith('+')) {
      if (cleanNumber.length == 10) {
        phoneNumber = '+91$cleanNumber';
      } else {
        phoneNumber = '+1$cleanNumber'; // Assume US if not 10 digits
      }
    } else {
      phoneNumber = cleanNumber;
    }

    setState(() => _isLoading = true);

    try {
      await FirebaseAuth.instance.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          UserCredential userCredential = await FirebaseAuth.instance
              .signInWithCredential(credential);

          // Check if user profile exists, if not create one
          User? user = userCredential.user;
          if (user != null) {
            bool profileExists = await userProfileExists(user.uid);
            if (!profileExists) {
              await saveUserToFirestore(user);
            }
          }

          if (mounted) {
            Navigator.pushReplacement(
              context,
              _animRoute(const ServiceChoicePage()),
            );
          }
        },
        verificationFailed: (FirebaseAuthException e) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Verification failed: ${e.message}')),
            );
          }
        },
        codeSent: (String verificationId, int? resendToken) {
          setState(() {
            _verificationId = verificationId;
            _isOtpSent = true;
          });
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('OTP sent to your phone!')),
          );
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          setState(() {
            _verificationId = verificationId;
          });
        },
        timeout: const Duration(seconds: 60),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error: $e')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _verifyOTP() async {
    if (_otpController.text.trim().length != 6) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(const SnackBar(content: Text('Please enter 6-digit OTP')));
      return;
    }

    setState(() => _isLoading = true);

    try {
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: _verificationId!,
        smsCode: _otpController.text.trim(),
      );
      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithCredential(credential);

      // Check if user profile exists, if not create one
      User? user = userCredential.user;
      if (user != null) {
        bool profileExists = await userProfileExists(user.uid);
        if (!profileExists) {
          await saveUserToFirestore(user);
        }
      }

      if (mounted) {
        Navigator.pushReplacement(
          context,
          _animRoute(const ServiceChoicePage()),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Invalid OTP: $e')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // Email login with password
  Future<void> _loginWithEmail() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithEmailAndPassword(
            email: _userController.text.trim(),
            password: _passwordController.text.trim(),
          );

      User? user = userCredential.user;

      // Check if email is verified
      if (user != null && !user.emailVerified) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Please verify your email before accessing the app.'),
            backgroundColor: Colors.orange,
          ),
        );

        // Navigate to email verification page
        Navigator.pushReplacement(
          context,
          _animRoute(const EmailVerificationPage()),
        );
        return;
      }

      // Check if user profile exists in Firestore, if not create one
      if (user != null) {
        bool profileExists = await userProfileExists(user.uid);
        if (!profileExists) {
          await saveUserToFirestore(user);
        }
      }

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Login successful!'),
          backgroundColor: Colors.green,
        ),
      );

      Navigator.pushReplacement(context, _animRoute(const ServiceChoicePage()));
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Login failed: $e')));
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Log In")),
      body: Column(
        children: [
          const ServanaHeader(),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    TextFormField(
                      controller: _userController,
                      onChanged: (_) => _detectInputType(),
                      decoration: InputDecoration(
                        labelText: "Email or Phone Number *",
                        hintText: _isPhoneLogin
                            ? "Enter phone number"
                            : "Enter email address",
                        border: const OutlineInputBorder(),
                        prefixIcon: Icon(
                          _isPhoneLogin ? Icons.phone : Icons.email,
                        ),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please enter email or phone number";
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 15),

                    // Show appropriate field based on login type
                    if (_isPhoneLogin && _isOtpSent) ...[
                      TextFormField(
                        controller: _otpController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          labelText: "Enter OTP",
                          hintText: "6-digit code",
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.security),
                        ),
                        validator: (value) {
                          if (value == null || value.length != 6) {
                            return "Please enter 6-digit OTP";
                          }
                          return null;
                        },
                      ),
                    ] else if (!_isPhoneLogin) ...[
                      TextFormField(
                        controller: _passwordController,
                        obscureText: true,
                        decoration: const InputDecoration(
                          labelText: "Password *",
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.lock),
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return "Please enter password";
                          }
                          return null;
                        },
                      ),
                    ],

                    const SizedBox(height: 25),

                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.black,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        onPressed: _isLoading ? null : _handleLogin,
                        child: _isLoading
                            ? const CircularProgressIndicator(
                                color: Colors.white,
                              )
                            : Text(
                                _isLoading
                                    ? 'Processing...'
                                    : _isPhoneLogin
                                    ? (_isOtpSent ? 'Verify OTP' : 'Send OTP')
                                    : 'Login',
                                style: const TextStyle(fontSize: 16),
                              ),
                      ),
                    ),

                    const SizedBox(height: 15),

                    // Show status indicator
                    if (_isPhoneLogin && _isOtpSent) ...[
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.green.shade50,
                          border: Border.all(color: Colors.green),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.email, color: Colors.green),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                'OTP sent! Enter the code to continue.',
                                style: TextStyle(color: Colors.green.shade700),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ] else ...[
                      Text(
                        _isPhoneLogin
                            ? "Phone login detected"
                            : "Email + password login",
                        style: TextStyle(color: Colors.grey[600], fontSize: 14),
                      ),
                    ],
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Handle login button press
  Future<void> _handleLogin() async {
    if (_isPhoneLogin) {
      if (!_isOtpSent) {
        await _sendOTP();
      } else {
        await _verifyOTP();
      }
    } else {
      await _loginWithEmail();
    }
  }
}

/// 📧 Email Verification Page
class EmailVerificationPage extends StatefulWidget {
  const EmailVerificationPage({super.key});
  @override
  State<EmailVerificationPage> createState() => _EmailVerificationPageState();
}

class _EmailVerificationPageState extends State<EmailVerificationPage> {
  bool _isLoading = false;
  bool _isResending = false;
  User? _user;

  @override
  void initState() {
    super.initState();
    _user = FirebaseAuth.instance.currentUser;
  }

  Future<void> _checkEmailVerified() async {
    setState(() => _isLoading = true);

    try {
      await _user?.reload();
      _user = FirebaseAuth.instance.currentUser;

      if (_user?.emailVerified == true) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Email verified successfully!'),
            backgroundColor: Colors.green,
          ),
        );

        Navigator.pushReplacement(
          context,
          _animRoute(const ServiceChoicePage()),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Email not verified yet. Please check your email.'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error checking verification: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _resendVerificationEmail() async {
    setState(() => _isResending = true);

    try {
      await _user?.sendEmailVerification();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Verification email sent! Check your inbox.'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Failed to resend email: $e')));
    } finally {
      setState(() => _isResending = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Verify Email"),
        actions: [
          TextButton(
            onPressed: () async {
              await FirebaseAuth.instance.signOut();
              Navigator.pushAndRemoveUntil(
                context,
                _animRoute(const AuthChoicePage()),
                (route) => false,
              );
            },
            child: const Text('Sign Out', style: TextStyle(color: Colors.red)),
          ),
        ],
      ),
      body: Column(
        children: [
          const ServanaHeader(),
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(20),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.email_outlined,
                    size: 80,
                    color: Colors.blue.shade600,
                  ),
                  const SizedBox(height: 24),

                  Text(
                    'Verify Your Email',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.grey.shade800,
                    ),
                  ),
                  const SizedBox(height: 16),

                  Text(
                    'We\'ve sent a verification email to:',
                    style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),

                  Text(
                    _user?.email ?? 'your email',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue.shade700,
                    ),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 24),

                  Text(
                    'Please check your email and click the verification link to continue.',
                    style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 40),

                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                      ),
                      onPressed: _isLoading ? null : _checkEmailVerified,
                      child: _isLoading
                          ? const CircularProgressIndicator(color: Colors.white)
                          : const Text(
                              'I\'ve Verified My Email',
                              style: TextStyle(fontSize: 16),
                            ),
                    ),
                  ),
                  const SizedBox(height: 16),

                  SizedBox(
                    width: double.infinity,
                    child: OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        side: BorderSide(color: Colors.blue.shade600),
                      ),
                      onPressed: _isResending ? null : _resendVerificationEmail,
                      child: _isResending
                          ? const CircularProgressIndicator()
                          : Text(
                              'Resend Verification Email',
                              style: TextStyle(
                                fontSize: 16,
                                color: Colors.blue.shade600,
                              ),
                            ),
                    ),
                  ),
                  const SizedBox(height: 24),

                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.blue.shade200),
                    ),
                    child: Column(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: Colors.blue.shade600,
                          size: 20,
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Didn\'t receive the email? Check your spam folder or try resending.',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.blue.shade700,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Keeping PhoneAuthPage for backward compatibility but it's now replaced by UnifiedLoginPage

/// 🔐 OTP Verification
class OTPVerificationPage extends StatefulWidget {
  final String verificationId;
  final String phoneNumber;

  const OTPVerificationPage({
    super.key,
    required this.verificationId,
    required this.phoneNumber,
  });

  @override
  State<OTPVerificationPage> createState() => _OTPVerificationPageState();
}

class _OTPVerificationPageState extends State<OTPVerificationPage> {
  final _otpController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  bool _isLoading = false;

  Future<void> _verifyOTP() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // 2. Use saved verificationId + entered OTP to create credential
      PhoneAuthCredential credential = PhoneAuthProvider.credential(
        verificationId: widget.verificationId, // Using the saved verificationId
        smsCode: _otpController.text.trim(), // User entered OTP
      );

      // 3. Pass the credential to FirebaseAuth to sign in
      UserCredential userCredential = await FirebaseAuth.instance
          .signInWithCredential(credential);

      // Optional: Access user info after sign-in
      User? user = userCredential.user;
      print('User signed in: ${user?.phoneNumber}');

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Phone verification successful!')),
        );

        // Navigate to home screen after successful sign-in
        Navigator.pushAndRemoveUntil(
          context,
          _animRoute(const ServiceChoicePage()),
          (route) => false,
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Invalid OTP: $e')));
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  Future<void> _resendOTP() async {
    try {
      await FirebaseAuth.instance.verifyPhoneNumber(
        phoneNumber: widget.phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          // 3. Pass credential to FirebaseAuth for auto sign-in
          try {
            await FirebaseAuth.instance.signInWithCredential(credential);
            if (mounted) {
              Navigator.pushAndRemoveUntil(
                context,
                _animRoute(const ServiceChoicePage()),
                (route) => false,
              );
            }
          } catch (e) {
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Auto sign-in failed: $e')),
              );
            }
          }
        },
        verificationFailed: (FirebaseAuthException e) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Resend failed: ${e.message}')),
            );
          }
        },
        codeSent: (String newVerificationId, int? resendToken) {
          // 1. Save the new verificationId when resend OTP is sent
          // Update the widget's verificationId - we need to pass it back
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('New OTP sent successfully!')),
            );
            // Navigate to new OTP page with updated verificationId
            Navigator.pushAndRemoveUntil(
              context,
              MaterialPageRoute(
                builder: (_) => OTPVerificationPage(
                  verificationId: newVerificationId,
                  phoneNumber: widget.phoneNumber,
                ),
              ),
              (Route<dynamic> route) => false, // remove all previous routes
            );
          }
        },
        codeAutoRetrievalTimeout: (String verificationId) {},
        timeout: const Duration(seconds: 60),
      );
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Resend error: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Verify OTP")),
      body: Column(
        children: [
          const ServanaHeader(),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Form(
                key: _formKey,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      "Enter the 6-digit code sent to",
                      style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      widget.phoneNumber,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.red,
                      ),
                    ),
                    const SizedBox(height: 30),
                    TextFormField(
                      controller: _otpController,
                      keyboardType: TextInputType.number,
                      textAlign: TextAlign.center,
                      style: const TextStyle(fontSize: 24, letterSpacing: 8),
                      decoration: const InputDecoration(
                        labelText: "Enter OTP",
                        hintText: "000000",
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.security),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return "Please enter OTP";
                        }
                        if (value.length != 6) {
                          return "Please enter valid 6-digit OTP";
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 30),
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        onPressed: _isLoading ? null : _verifyOTP,
                        child: _isLoading
                            ? const CircularProgressIndicator(
                                color: Colors.white,
                              )
                            : const Text(
                                "Verify",
                                style: TextStyle(fontSize: 16),
                              ),
                      ),
                    ),
                    const SizedBox(height: 20),
                    TextButton(
                      onPressed: _resendOTP,
                      child: const Text(
                        "Didn't receive code? Resend",
                        style: TextStyle(color: Colors.red),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

/// 🤔 Service Choice
class ServiceChoicePage extends StatefulWidget {
  const ServiceChoicePage({super.key});
  @override
  State<ServiceChoicePage> createState() => _ServiceChoicePageState();
}

class _ServiceChoicePageState extends State<ServiceChoicePage> {
  int _selectedIndex = 0;

  final List<Widget> _pages = [
    const _HomePage(),
    const UserProfilePage(),
    const ContactUsPage(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.grey.shade900, Colors.black87],
          ),
        ),
        child: _pages[_selectedIndex],
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          color: Colors.grey.shade900,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.3),
              blurRadius: 10,
              offset: const Offset(0, -5),
            ),
          ],
        ),
        child: BottomNavigationBar(
          currentIndex: _selectedIndex,
          onTap: (index) => setState(() => _selectedIndex = index),
          type: BottomNavigationBarType.fixed,
          backgroundColor: Colors.transparent,
          selectedItemColor: Colors.deepPurple.shade300,
          unselectedItemColor: Colors.grey.shade500,
          elevation: 0,
          items: const [
            BottomNavigationBarItem(
              icon: Icon(Icons.home_rounded),
              label: 'Home',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.person_rounded),
              label: 'Profile',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.contact_support_rounded),
              label: 'Contact Us',
            ),
          ],
        ),
      ),
    );
  }
}

// Home Page Widget
class _HomePage extends StatelessWidget {
  const _HomePage();

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        const ServanaHeader(),
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              children: [
                const SizedBox(height: 20),
                Text(
                  "Welcome to Servana",
                  style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  "Your trusted service marketplace",
                  style: TextStyle(color: Colors.grey.shade300, fontSize: 16),
                ),
                const SizedBox(height: 40),
                Expanded(
                  child: GridView.count(
                    crossAxisCount: 2,
                    crossAxisSpacing: 20,
                    mainAxisSpacing: 20,
                    childAspectRatio: 0.85,
                    children: [
                      // A modern service card
                      _modernServiceCard(
                        context,
                        "Get Service",
                        "Book trusted professionals",
                        Icons.search_rounded,
                        LinearGradient(
                          colors: [
                            Colors.deepPurple.shade600,
                            Colors.deepPurple.shade800,
                          ],
                        ),
                        const GetServicePage(),
                      ),

                      // Another modern service card
                      _modernServiceCard(
                        context,
                        "Offer Service",
                        "Start earning today",
                        Icons.work_rounded,
                        LinearGradient(
                          colors: [
                            Colors.indigo.shade600,
                            Colors.indigo.shade800,
                          ],
                        ),
                        const ProfileSetupWizard(),
                      ),
                      // Another button using _optionBtn
                      Center(
                        child: SizedBox(
                          width:
                              MediaQuery.of(context).size.width *
                              0.4, // about half width
                          child: _optionBtn(
                            context,
                            "Contact Support",
                            Colors.green,
                            const ContactUsPage(),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _modernServiceCard(
    BuildContext context,
    String title,
    String subtitle,
    IconData icon,
    Gradient gradient,
    Widget page,
  ) {
    return Container(
      decoration: BoxDecoration(
        gradient: gradient,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.15),
            blurRadius: 12,
            offset: const Offset(0, 6),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () => Navigator.push(context, _animRoute(page)),
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Icon(icon, size: 32, color: Colors.white),
                ),
                const SizedBox(height: 16),
                Text(
                  title,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 4),
                Text(
                  subtitle,
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.9),
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _optionBtn(
    BuildContext ctx,
    String text,
    Color color,
    Widget nextPage,
  ) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: color,
        foregroundColor: Colors.white,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
        padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 18),
      ),
      onPressed: () {
        Navigator.push(ctx, _animRoute(nextPage));
      },
      child: Text(text, style: const TextStyle(fontSize: 18)),
    );
  }
}

/// ✨ Common Animation
PageRouteBuilder _animRoute(Widget page) {
  return PageRouteBuilder(
    pageBuilder: (_, __, ___) => page,
    transitionsBuilder: (_, anim, __, child) {
      final slide = Tween(
        begin: const Offset(0, 1),
        end: Offset.zero,
      ).animate(CurvedAnimation(parent: anim, curve: Curves.easeOut));
      return SlideTransition(position: slide, child: child);
    },
    transitionDuration: const Duration(milliseconds: 600),
  );
}

/// 👨‍🔧 Service Provider Dashboard (Wizard Style with Tabs)
class ProviderDashboard extends StatefulWidget {
  const ProviderDashboard({super.key});

  @override
  State<ProviderDashboard> createState() => _ProviderDashboardState();
}

class _ProviderDashboardState extends State<ProviderDashboard>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Provider Dashboard"),
        bottom: TabBar(
          controller: _tabController,
          isScrollable: true,
          indicatorColor: Colors.white,
          tabs: const [
            Tab(text: "Profile Setup"),
            Tab(text: "Availability"),
            Tab(text: "Dashboard"),
            Tab(text: "Requests"),
            Tab(text: "Profile Mgmt"),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: const [
          _ProfileSetupWizard(),
          _AvailabilityPage(),
          _DashboardPage(),
          _RequestsPage(),
          _ProfileManagementPage(),
        ],
      ),
    );
  }
}

/// 🧭 Profile Setup Wizard
class _ProfileSetupWizard extends StatelessWidget {
  const _ProfileSetupWizard();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedOpacity(
        opacity: 1,
        duration: const Duration(seconds: 1),
        child: const Text("Step-by-step Profile Setup Wizard"),
      ),
    );
  }
}

/// 📅 Availability
class _AvailabilityPage extends StatelessWidget {
  const _AvailabilityPage();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedScale(
        duration: const Duration(milliseconds: 600),
        scale: 1,
        child: const Text("Set your available/unavailable dates here"),
      ),
    );
  }
}

/// 📊 Dashboard
class _DashboardPage extends StatelessWidget {
  const _DashboardPage();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedSlide(
        duration: const Duration(milliseconds: 600),
        offset: const Offset(0, 0),
        child: const Text("Bookings Overview (Requests, Upcoming, Past)"),
      ),
    );
  }
}

/// 📨 Requests
class _RequestsPage extends StatelessWidget {
  const _RequestsPage();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedOpacity(
        opacity: 1,
        duration: const Duration(milliseconds: 800),
        child: const Text("Accept / Decline Bookings + Messaging"),
      ),
    );
  }
}

/// 👤 Profile Management
class _ProfileManagementPage extends StatelessWidget {
  const _ProfileManagementPage();

  @override
  Widget build(BuildContext context) {
    return Center(
      child: AnimatedRotation(
        turns: 0,
        duration: const Duration(seconds: 1),
        child: const Text("Update Bio, Pricing, Portfolio anytime"),
      ),
    );
  }
}

/// 🧑‍🎨 Profile Setup Wizard (Step 1: Profile Details)
class ProfileSetupWizard extends StatefulWidget {
  const ProfileSetupWizard({super.key});

  @override
  State<ProfileSetupWizard> createState() => _ProfileSetupWizardState();
}

class _ProfileSetupWizardState extends State<ProfileSetupWizard> {
  final _formKey = GlobalKey<FormState>();
  final fullNameController = TextEditingController();
  final bioController = TextEditingController();
  String? selectedCity;
  List<String> selectedLanguages = [];
  String? imagePath;

  final List<String> cities = [
    "Delhi",
    "Mumbai",
    "Bengaluru",
    "Chennai",
    "Hyderabad",
    "Kolkata",
    "Pune",
    "Ahmedabad",
    "Jaipur",
    "Lucknow",
    "Chandigarh",
    "Bhopal",
    "Indore",
    "Nagpur",
    "Surat",
    "Kanpur",
    "Patna",
    "Vadodara",
    "Coimbatore",
    "Kochi",
  ];

  final List<String> languages = [
    "English",
    "Hindi",
    "Bengali",
    "Telugu",
    "Marathi",
    "Tamil",
    "Urdu",
    "Gujarati",
    "Kannada",
    "Odia",
    "Malayalam",
    "Punjabi",
    "Assamese",
    "Maithili",
    "Santali",
    "Kashmiri",
    "Nepali",
    "Konkani",
    "Sindhi",
    "Dogri",
    "Manipuri",
    "Bodo",
    "Sanskrit",
  ];

  Future<void> _pickImage() async {
    // TODO: Use image_picker package in real app
    setState(() {
      imagePath = "assets/profile.png"; // placeholder for now
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Profile Setup")),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              /// 📸 Profile Photo
              Center(
                child: GestureDetector(
                  onTap: _pickImage,
                  child: CircleAvatar(
                    radius: 50,
                    backgroundImage: imagePath != null
                        ? AssetImage(imagePath!)
                        : null,
                    child: imagePath == null
                        ? const Icon(Icons.camera_alt, size: 40)
                        : null,
                  ),
                ),
              ),
              const SizedBox(height: 20),

              /// 👤 Full Name
              TextFormField(
                controller: fullNameController,
                decoration: const InputDecoration(
                  labelText: "Full Name",
                  hintText: "Enter your full name",
                  border: OutlineInputBorder(),
                ),
                validator: (value) => value == null || value.isEmpty
                    ? "Enter your full name"
                    : null,
              ),
              const SizedBox(height: 20),

              /// ✍️ Bio
              TextFormField(
                controller: bioController,
                maxLength: 300,
                decoration: const InputDecoration(
                  labelText: "Bio / Description",
                  hintText: "e.g. I’ve been a mehndi artist for 5 years...",
                  border: OutlineInputBorder(),
                ),
                validator: (value) =>
                    value == null || value.isEmpty ? "Enter your bio" : null,
              ),
              const SizedBox(height: 20),

              /// 📍 City Autocomplete
              Autocomplete<String>(
                optionsBuilder: (TextEditingValue textEditingValue) {
                  if (textEditingValue.text.isEmpty) {
                    return const Iterable<String>.empty();
                  }
                  return cities.where((String option) {
                    return option.toLowerCase().contains(
                      textEditingValue.text.toLowerCase(),
                    );
                  });
                },
                onSelected: (String selection) {
                  setState(() {
                    selectedCity = selection;
                  });
                },
                fieldViewBuilder:
                    (context, controller, focusNode, onEditingComplete) {
                      return TextFormField(
                        controller: controller,
                        focusNode: focusNode,
                        decoration: const InputDecoration(
                          labelText: "Location / City",
                          border: OutlineInputBorder(),
                        ),
                        validator: (value) =>
                            (selectedCity == null || selectedCity!.isEmpty)
                            ? "Please select a city"
                            : null,
                      );
                    },
              ),

              const SizedBox(height: 20),

              /// 🗣 Languages (multi select in ONE box)
              MultiSelectDialogField<String>(
                items: languages
                    .map((lang) => MultiSelectItem(lang, lang))
                    .toList(),
                title: const Text("Languages Spoken"),
                selectedColor: Colors.red,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade400, width: 1),
                ),
                buttonText: const Text(
                  "Select Languages",
                  style: TextStyle(fontSize: 16),
                ),
                onConfirm: (results) {
                  setState(() {
                    selectedLanguages = results;
                  });
                },
              ),

              const SizedBox(height: 30),

              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red,
                  foregroundColor: Colors.white,
                ),
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    if (selectedLanguages.isEmpty) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text("Select at least one language"),
                        ),
                      );
                      return;
                    }
                    // Create user profile data and populate it
                    final userProfile = UserProfileData();
                    userProfile.fullName = fullNameController.text;
                    userProfile.bio = bioController.text;
                    userProfile.city = selectedCity;
                    userProfile.languages = selectedLanguages;
                    userProfile.profileImagePath = imagePath;

                    Navigator.push(
                      context,
                      PageRouteBuilder(
                        pageBuilder: (_, __, ___) =>
                            ServiceDetailsWizard(userProfile: userProfile),
                        transitionsBuilder: (_, animation, __, child) {
                          return SlideTransition(
                            position: Tween<Offset>(
                              begin: const Offset(1.0, 0.0),
                              end: Offset.zero,
                            ).animate(animation),
                            child: child,
                          );
                        },
                      ),
                    );
                  }
                },
                child: const Text("Next"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
